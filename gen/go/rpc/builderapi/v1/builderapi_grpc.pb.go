// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: rpc/builderapi/v1/builderapi.proto

package builderapiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Builder_ReceiveBids_FullMethodName       = "/rpc.builderapi.v1.Builder/ReceiveBids"
	Builder_SendProcessedBids_FullMethodName = "/rpc.builderapi.v1.Builder/SendProcessedBids"
)

// BuilderClient is the client API for Builder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuilderClient interface {
	// ReceiveBids is called by the builder to receive bids from the mev-commit node.
	// The mev-commit node will stream bids to the builder.
	ReceiveBids(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Builder_ReceiveBidsClient, error)
	// SendProcessedBids is called by the builder to send processed bids to the mev-commit node.
	// The builder will stream processed bids to the mev-commit node.
	SendProcessedBids(ctx context.Context, opts ...grpc.CallOption) (Builder_SendProcessedBidsClient, error)
}

type builderClient struct {
	cc grpc.ClientConnInterface
}

func NewBuilderClient(cc grpc.ClientConnInterface) BuilderClient {
	return &builderClient{cc}
}

func (c *builderClient) ReceiveBids(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Builder_ReceiveBidsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Builder_ServiceDesc.Streams[0], Builder_ReceiveBids_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &builderReceiveBidsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Builder_ReceiveBidsClient interface {
	Recv() (*Bid, error)
	grpc.ClientStream
}

type builderReceiveBidsClient struct {
	grpc.ClientStream
}

func (x *builderReceiveBidsClient) Recv() (*Bid, error) {
	m := new(Bid)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *builderClient) SendProcessedBids(ctx context.Context, opts ...grpc.CallOption) (Builder_SendProcessedBidsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Builder_ServiceDesc.Streams[1], Builder_SendProcessedBids_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &builderSendProcessedBidsClient{stream}
	return x, nil
}

type Builder_SendProcessedBidsClient interface {
	Send(*BidResponse) error
	CloseAndRecv() (*EmptyMessage, error)
	grpc.ClientStream
}

type builderSendProcessedBidsClient struct {
	grpc.ClientStream
}

func (x *builderSendProcessedBidsClient) Send(m *BidResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *builderSendProcessedBidsClient) CloseAndRecv() (*EmptyMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BuilderServer is the server API for Builder service.
// All implementations must embed UnimplementedBuilderServer
// for forward compatibility
type BuilderServer interface {
	// ReceiveBids is called by the builder to receive bids from the mev-commit node.
	// The mev-commit node will stream bids to the builder.
	ReceiveBids(*EmptyMessage, Builder_ReceiveBidsServer) error
	// SendProcessedBids is called by the builder to send processed bids to the mev-commit node.
	// The builder will stream processed bids to the mev-commit node.
	SendProcessedBids(Builder_SendProcessedBidsServer) error
	mustEmbedUnimplementedBuilderServer()
}

// UnimplementedBuilderServer must be embedded to have forward compatible implementations.
type UnimplementedBuilderServer struct {
}

func (UnimplementedBuilderServer) ReceiveBids(*EmptyMessage, Builder_ReceiveBidsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveBids not implemented")
}
func (UnimplementedBuilderServer) SendProcessedBids(Builder_SendProcessedBidsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendProcessedBids not implemented")
}
func (UnimplementedBuilderServer) mustEmbedUnimplementedBuilderServer() {}

// UnsafeBuilderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuilderServer will
// result in compilation errors.
type UnsafeBuilderServer interface {
	mustEmbedUnimplementedBuilderServer()
}

func RegisterBuilderServer(s grpc.ServiceRegistrar, srv BuilderServer) {
	s.RegisterService(&Builder_ServiceDesc, srv)
}

func _Builder_ReceiveBids_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BuilderServer).ReceiveBids(m, &builderReceiveBidsServer{stream})
}

type Builder_ReceiveBidsServer interface {
	Send(*Bid) error
	grpc.ServerStream
}

type builderReceiveBidsServer struct {
	grpc.ServerStream
}

func (x *builderReceiveBidsServer) Send(m *Bid) error {
	return x.ServerStream.SendMsg(m)
}

func _Builder_SendProcessedBids_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BuilderServer).SendProcessedBids(&builderSendProcessedBidsServer{stream})
}

type Builder_SendProcessedBidsServer interface {
	SendAndClose(*EmptyMessage) error
	Recv() (*BidResponse, error)
	grpc.ServerStream
}

type builderSendProcessedBidsServer struct {
	grpc.ServerStream
}

func (x *builderSendProcessedBidsServer) SendAndClose(m *EmptyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *builderSendProcessedBidsServer) Recv() (*BidResponse, error) {
	m := new(BidResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Builder_ServiceDesc is the grpc.ServiceDesc for Builder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Builder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.builderapi.v1.Builder",
	HandlerType: (*BuilderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveBids",
			Handler:       _Builder_ReceiveBids_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendProcessedBids",
			Handler:       _Builder_SendProcessedBids_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/builderapi/v1/builderapi.proto",
}
