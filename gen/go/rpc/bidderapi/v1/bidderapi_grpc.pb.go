// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: rpc/bidderapi/v1/bidderapi.proto

package bidderapiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bidder_SendBid_FullMethodName       = "/rpc.seacherapi.v1.Bidder/SendBid"
	Bidder_RegisterStake_FullMethodName = "/rpc.seacherapi.v1.Bidder/RegisterStake"
	Bidder_GetStake_FullMethodName      = "/rpc.seacherapi.v1.Bidder/GetStake"
	Bidder_GetMinStake_FullMethodName   = "/rpc.seacherapi.v1.Bidder/GetMinStake"
)

// BidderClient is the client API for Bidder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidderClient interface {
	// SendBid
	//
	// Send a bid to the bidder mev-commit node.
	SendBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (Bidder_SendBidClient, error)
	// RegisterStake
	//
	// RegisterStake is called by the bidder to register its stake in the bidder provider_registry.
	RegisterStake(ctx context.Context, in *StakeRequest, opts ...grpc.CallOption) (*StakeResponse, error)
	// GetStake
	//
	// GetStake is called by the bidder to get its stake in the bidder provider_registry.
	GetStake(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StakeResponse, error)
	// GetMinStake
	//
	// GetMinStake is called by the bidder to get the minimum stake required to be in the bidder provider_registry.
	GetMinStake(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StakeResponse, error)
}

type bidderClient struct {
	cc grpc.ClientConnInterface
}

func NewBidderClient(cc grpc.ClientConnInterface) BidderClient {
	return &bidderClient{cc}
}

func (c *bidderClient) SendBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (Bidder_SendBidClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bidder_ServiceDesc.Streams[0], Bidder_SendBid_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bidderSendBidClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bidder_SendBidClient interface {
	Recv() (*Commitment, error)
	grpc.ClientStream
}

type bidderSendBidClient struct {
	grpc.ClientStream
}

func (x *bidderSendBidClient) Recv() (*Commitment, error) {
	m := new(Commitment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bidderClient) RegisterStake(ctx context.Context, in *StakeRequest, opts ...grpc.CallOption) (*StakeResponse, error) {
	out := new(StakeResponse)
	err := c.cc.Invoke(ctx, Bidder_RegisterStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidderClient) GetStake(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StakeResponse, error) {
	out := new(StakeResponse)
	err := c.cc.Invoke(ctx, Bidder_GetStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidderClient) GetMinStake(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*StakeResponse, error) {
	out := new(StakeResponse)
	err := c.cc.Invoke(ctx, Bidder_GetMinStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BidderServer is the server API for Bidder service.
// All implementations must embed UnimplementedBidderServer
// for forward compatibility
type BidderServer interface {
	// SendBid
	//
	// Send a bid to the bidder mev-commit node.
	SendBid(*Bid, Bidder_SendBidServer) error
	// RegisterStake
	//
	// RegisterStake is called by the bidder to register its stake in the bidder provider_registry.
	RegisterStake(context.Context, *StakeRequest) (*StakeResponse, error)
	// GetStake
	//
	// GetStake is called by the bidder to get its stake in the bidder provider_registry.
	GetStake(context.Context, *EmptyMessage) (*StakeResponse, error)
	// GetMinStake
	//
	// GetMinStake is called by the bidder to get the minimum stake required to be in the bidder provider_registry.
	GetMinStake(context.Context, *EmptyMessage) (*StakeResponse, error)
	mustEmbedUnimplementedBidderServer()
}

// UnimplementedBidderServer must be embedded to have forward compatible implementations.
type UnimplementedBidderServer struct {
}

func (UnimplementedBidderServer) SendBid(*Bid, Bidder_SendBidServer) error {
	return status.Errorf(codes.Unimplemented, "method SendBid not implemented")
}
func (UnimplementedBidderServer) RegisterStake(context.Context, *StakeRequest) (*StakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStake not implemented")
}
func (UnimplementedBidderServer) GetStake(context.Context, *EmptyMessage) (*StakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStake not implemented")
}
func (UnimplementedBidderServer) GetMinStake(context.Context, *EmptyMessage) (*StakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinStake not implemented")
}
func (UnimplementedBidderServer) mustEmbedUnimplementedBidderServer() {}

// UnsafeBidderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidderServer will
// result in compilation errors.
type UnsafeBidderServer interface {
	mustEmbedUnimplementedBidderServer()
}

func RegisterBidderServer(s grpc.ServiceRegistrar, srv BidderServer) {
	s.RegisterService(&Bidder_ServiceDesc, srv)
}

func _Bidder_SendBid_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Bid)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BidderServer).SendBid(m, &bidderSendBidServer{stream})
}

type Bidder_SendBidServer interface {
	Send(*Commitment) error
	grpc.ServerStream
}

type bidderSendBidServer struct {
	grpc.ServerStream
}

func (x *bidderSendBidServer) Send(m *Commitment) error {
	return x.ServerStream.SendMsg(m)
}

func _Bidder_RegisterStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidderServer).RegisterStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bidder_RegisterStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidderServer).RegisterStake(ctx, req.(*StakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bidder_GetStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidderServer).GetStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bidder_GetStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidderServer).GetStake(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bidder_GetMinStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidderServer).GetMinStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bidder_GetMinStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidderServer).GetMinStake(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Bidder_ServiceDesc is the grpc.ServiceDesc for Bidder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bidder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.seacherapi.v1.Bidder",
	HandlerType: (*BidderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterStake",
			Handler:    _Bidder_RegisterStake_Handler,
		},
		{
			MethodName: "GetStake",
			Handler:    _Bidder_GetStake_Handler,
		},
		{
			MethodName: "GetMinStake",
			Handler:    _Bidder_GetMinStake_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendBid",
			Handler:       _Bidder_SendBid_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/bidderapi/v1/bidderapi.proto",
}
