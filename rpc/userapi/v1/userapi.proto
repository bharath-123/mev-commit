syntax = "proto3";

package rpc.seacherapi.v1;

option go_package = "github.com/primevprotocol/mev-commit/rpc/seacherapi/v1;userapiv1";

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "User API";
    version: "1.0.0-alpha";
    license: {
      name: "Business Source License 1.1";
      url: "https://github.com/primevprotocol/mev-commit/blob/main/LICENSE";
    };
  };
};

service User {
  // SendBid
  //
  // Send a bid to the user mev-commit node.
  rpc SendBid(Bid) returns (stream PreConfirmation) {
    option (google.api.http) = {
      post: "/v1/user/bid"
      body: "*"
    };
  }
  // RegisterStake
  //
  // RegisterStake is called by the user to register its stake in the user registry.
  rpc RegisterStake(StakeRequest) returns (StakeResponse) {
    option (google.api.http) = {post: "/v1/user/register_stake/{amount}"};
  }
  // GetStake
  //
  // GetStake is called by the user to get its stake in the user registry.
  rpc GetStake(EmptyMessage) returns (StakeResponse) {
    option (google.api.http) = {get: "/v1/user/get_stake"};
  }
  // GetMinStake
  //
  // GetMinStake is called by the user to get the minimum stake required to be in the user registry.
  rpc GetMinStake(EmptyMessage) returns (StakeResponse) {
    option (google.api.http) = {get: "/v1/user/get_min_stake"};
  }
}

message StakeRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Stake request"
      description: "Stake user in the user registry."
      required: ["stake"]
    }
    example: "{\"amount\": 1000000000000000000 }"
  };
  int64 amount = 1;
};

message StakeResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Stake response"
      description: "Get staked amount for user in the user registry."
    }
    example: "{\"amount\": 1000000000000000000 }"
  };
  int64 amount = 1;
};

message EmptyMessage {};

message Bid {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Bid message"
      description: "Unsigned bid message from users to the user mev-commit node."
      required: ["txHash", "amount", "blockNumber"]
    }
    example: "{\"txHash\": \"91a89B633194c0D86C539A1A5B14DCCacfD47094\", \"amount\": 1000000000000000000, \"blockNumber\": 123456}"
  };
  string tx_hash = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Hex string encoding of the hash of the transaction that the user wants to include in the block."
    pattern: "[a-fA-F0-9]{40}"
  }];
  int64 amount = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Amount of ETH that the user is willing to pay to the provider for including the transaction in the block."
  }];
  int64 block_number = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Max block number that the user wants to include the transaction in."
  }];
};

message PreConfirmation {
  string tx_hash = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Hex string encoding of the hash of the transaction that the user wants to include in the block."
    pattern: "[a-fA-F0-9]{40}"
  }];
  int64 amount = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Amount of ETH that the user has agreed to pay to the provider for including the transaction in the block."
  }];
  int64 block_number = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Max block number that the user wants to include the transaction in."
  }];
  string bid_digest = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Hex string encoding of digest of the bid message signed by the user."
  }];
  string bid_signature = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Hex string encoding of signature of the user that sent this bid."
  }];
  string pre_confirmation_digest = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Hex string encoding of digest of the pre-confirmation."
  }];
  string pre_confirmation_signature = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Hex string encoding of signature of the pre-confirmation signed by the provider confirming this transaction."
  }];
};
